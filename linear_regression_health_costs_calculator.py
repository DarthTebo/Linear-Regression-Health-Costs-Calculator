# -*- coding: utf-8 -*-
"""Linear Regression Health Costs Calculator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iYT29uBTiHIQAl1qN-wZ-ZD4ISwFJ6T1
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

copy_data = dataset.copy()

import collections

copy_data['smoker'] = copy_data['smoker'].map({'no': 0, 'yes': 1})
copy_data['sex'] = copy_data['sex'].map({'female': 1, 'male': 0})
collections.Counter(copy_data['region']).keys()

copy_data['region'] = copy_data['region'].map({'southwest': 0, 'southeast': 1, 'northwest' : 2, 'northeast' : 3})

copy_data.head()

# Split data
from sklearn.model_selection import train_test_split

copy_data2 = copy_data.copy()

x = copy_data2.drop('expenses', axis=1)
y = copy_data2.pop('expenses')

train_dataset, test_dataset, train_labels, test_labels = train_test_split(
    x, y,
    test_size=0.2
)

test_dataset.head()

from tensorflow.keras.layers.experimental import preprocessing

normalizer = preprocessing.Normalization()
normalizer.adapt(np.array(train_dataset))

model = tf.keras.Sequential([
    normalizer,
    layers.Dense(32, activation='relu'),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)
])

model.compile(
    optimizer=tf.optimizers.Adam(learning_rate=0.1),
    loss=['mean_absolute_error'], # Decides about pass the tests from website
    metrics=['mean_absolute_error', 'mean_squared_error']  # mse is required in tests from website
)

history = model.fit(
    train_dataset, 
    train_labels,
    epochs=100,
    verbose=0,
)

# RUN THIS CELL TO TEST YOUR MODEL. DO NOT MODIFY CONTENTS.
# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_dataset).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)